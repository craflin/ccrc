
abstract_declarator
    ptr_operator [ abstract_declarator ]
    direct_abstract_declarator

access_specifier
    'private'
    'protected'
    'public'

additive_expression
    multiplicative_expression
    additive_expression '+' multiplicative_expression
    additive_expression '-' multiplicative_expression

and_expression
    equality_expression
    and_expression '&' equality_expression

asm_definition
    'asm' '(' string_literal ')' ';'

assignment_expression
    conditional_expression
    logical_or_expression assignment_operator assignment_expression
    throw_expression

assignment_operator
    '='
    '*='
    '/='
    '%='
    '+='
    '-='
    '>>='
    '<<='
    '&='
    '^='
    '|='

base_clause
    ':' base_specifier_list

base_specifier
    [ '::' ] [ nested_name_specifier ] class_name
    'virtual' [ access_specifier ] [ '::' ] [ nested_name_specifier ] class_name
    access_specifier [ 'virtual' ] [ '::' ] [ nested_name_specifier ] class_name

base_specifier_list
    base_specifier
    base_specifier_list ',' base_specifier

block_declaration
    simple_declaration
    asm_definition
    namespace_alias_definition
    using_declaration
    using_directive

boolean_literal
    'false'
    'true'

cast_expression
    unary_expression
    '(' type_id ')' cast_expression

class_head
    class_key [ identifier ] [ base_clause ]
    class_key nested_name_specifier identifier [ base_clause ]
    class_key [ nested_name_specifier ] template_id [ base_clause ]

class_key
    'class'
    'struct'
    'union'

class_name
    identifier
    template_id

class_or_namespace_name
    class_name
    namespace_name

class_specifier
    class_head '{' [ member_specification ] '}'

compound_statement
    '{' [ statement_seq ] '}'

condition
    expression
    type_specifier_seq declarator '=' assignment_expression

conditional_expression
    logical_or_expression
    logical_or_expression '?' expression ':' assignment_expression

constant_expression
    conditional_expression

constant_initializer
    '=' constant_expression

conversion_declarator
    ptr_operator [ conversion_declarator ]
    
conversion_function_id
    'operator' conversion_type_id

conversion_type_id
    type_specifier_seq [ conversion_declarator ]

ctor_initializer
    ':' mem_initializer_list

cv_qualifier
    'const'
    'volatile'

cv_qualifier_seq
    cv_qualifier [ cv_qualifier_seq ]

decl_specifier
    storage_class_specifier
    type_specifier
    function_specifier
    'friend'
    'typedef'

decl_specifier_seq
    [ decl_specifier_seq ] decl_specifier

declaration
    block_declaration
    function_definition
    template_declaration
    explicit_instantiation
    explicit_specialization
    linkage_specification
    namespace_definition

declaration_seq
    declaration
    declaration_seq declaration

declaration_statement
    block_declaration
    
declarator
    direct_declarator
    ptr_operator declarator

declarator_id
    id_expression
    [ '::' ] [ nested_name_specifier ] type_name

delete_expression
    [ '::' ] 'delete' cast_expression
    [ '::' ] 'delete' '[' ']' cast_expression

direct_abstract_declarator
    [ direct_abstract_declarator ] '(' paramerter_declaration_clause ')' [ cv_qualifier_seq ] [ exception_specification ]
    [ direct_abstract_declarator ] '[' [ constant_expression ] ']'
    '(' abstract_declarator ')'

direct_declarator
    declarator_id
    direct_declarator '(' paramerter_declaration_clause ')' [ cv_qualifier_seq ] [ exception_specification ]
    direct_declarator '[' [ constant_expression ] ']'
    '(' declarator ')'

direct_new_declarator
    '[' expression ']'
    direct_new_declarator '[' constant_expression ']'

elaborated_type_specifier
    class_key [ '::' ] [ nested_name_specifier ] identifier
    'enum' [ '::' ] [ nested_name_specifier ] identifier
    'typename' [ '::' ] nested_name_specifier identifier
    'typename' [ '::' ] nested_name_specifier [ 'template' ] template_id

enum_name
    identifier

enum_specifier
    'enum' [ identifier ] '{' [ enumerator_list ] '}'

enumerator
    identifier

enumerator_definition
    enumerator
    enumerator '=' constant_expression

enumerator_list
    enumerator_definition
    enumerator_list ',' enumerator_definition

equality_expression
    relational_expression
    equality_expression '==' relational_expression
    equality_expression '!=' relational_expression

exception_declatation
    type_specifier_seq declarator
    type_specifier_seq abstract_declarator
    type_specifier_seq
    '...'

exception_specification
    'throw' '(' [ type_id_list ] ')'

exclusive_or_expression
    and_expression
    exclusive_or_expression '^' and_expression

explicit_instantiation
    'template' declaration

explicit_specialization
    'template' '<' '>' declaration

expression
    assignment_expression
    expression ',' assignment_expression

expression_list
    assignment_expression
    expression_list ',' assignment_expression

expression_statement
    [ expression ] ';'
    
extension_namespace_definition
    'namespace' original_namespace_name '{' namespace_body '}'

for_init_statement
    expression_statement
    simple_declaration

function_body
    compound_statement

function_definition
    [ decl_specifier_seq ] declarator [ ctor_initializer ] function_body
    [ decl_specifier_seq ] declarator function_try_block

function_specifier
    'inline'
    'virtual'
    'explicit'

function_try_block
    'try' [ ctor_initializer ] function_body handler_seq

handler
    'catch' '(' exception_declatation ')' compound_statement

handler_seq
    handler [ handler_seq ]

id_expression
    unqualified_id
    qualified_id

identifier_list
    identifier
    identifier_list ',' identifier

inclusive_or_expression
    exclusive_or_expression
    inclusive_or_expression '|' exclusive_or_expression

init_declarator
    declarator [ initializer ]

init_declarator_list
    init_declarator
    init_declarator_list ',' init_declarator

initializer
    '=' initializer_clause
    '(' expression_list ')'

initializer_clause
    assignment_expression
    '{' initializer_list [ ',' ] '}'
    '{' '}'

initializer_list
    initializer_clause
    initializer_list ',' initializer_clause

iteration_statement
    'while' '(' condition ')' statement
    'do' statement 'while' '(' expression ')' ';'
    'for' '(' for_init_statement [ condition ] ';' [ expression ] ')' statement

jump_statement
    'break' ';'
    'continue' ';'
    'return' [ expression ] ';'
    'goto' identifier ';'

labeled_statement
    identifier ':' statement
    'case' constant_expression ':' statement
    'default' ':' statement

linkage_specification
    'extern' string_literal '{' [ declaration_seq ] '}'
    'extern' string_literal declaration

literal
    integer_literal
    character_literal
    floating_literal
    string_literal
    boolean_literal

logical_and_expression
    inclusive_or_expression
    logical_and_expression '&&' inclusive_or_expression

logical_or_expression
    logical_and_expression
    logical_or_expression '||' logical_and_expression

mem_initializer
    mem_initializer_id '(' [ expression_list ] ')'

mem_initializer_id
    [ '::' ] [ nested_name_specifier ] class_name
    identifier

mem_initializer_list
    mem_initializer
    mem_initializer ',' mem_initializer_list

member_declaration
    [ decl_specifier_seq ] [ member_declarator_list ] ';'
    function_definition [ ';' ]
    [ '::' ] nested_name_specifier [ 'template' ] unqualified_id ';'
    using_declaration
    template_declaration

member_declarator
    declarator [ pure_specifier ]
    declarator [ constant_initializer ]
    [ identifier ] ':' constant_expression

member_declarator_list
    member_declarator
    member_declarator_list ',' member_declarator

member_specification
    member_declaration [ member_specification ]
    access_specifier ':' [ member_specification ]

multiplicative_expression
    pm_expression
    multiplicative_expression '*' pm_expression
    multiplicative_expression '/' pm_expression
    multiplicative_expression '%' pm_expression

named_namespace_definition
    original_namespace_definition
    extension_namespace_definition

namespace_alias
    identifier

namespace_alias_definition
    'namespace' identifier '=' qualified_namespace_specifier ';'

namespace_body
    [ declaration_seq ]

namespace_definition
    named_namespace_definition
    unnamed_namespace_definition

namespace_name
    original_namespace_name
    namespace_alias

nested_name_specifier
    class_or_namespace_name '::' [ nested_name_specifier ]
    class_or_namespace_name '::' 'template' nested_name_specifier

new_declarator
    ptr_operator [ new_declarator ]
    direct_new_declarator

new_expression
    [ '::' ] 'new' [ new_placement ] new_type_id [ new_initializer ]
    [ '::' ] 'new' [ new_placement ] '(' type_id ')' [ new_initializer ]

new_initializer
    '(' [ expression_list ] ')'

new_placement
    '(' expression_list ')'

new_type_id
    type_specifier_seq [ new_declarator ]

operator
    'new'
    'delete'
    'new[]'
    'delete[]'
    '+'
    '-'
    '*'
    '/'
    '%'
    '^'
    '&'
    '|'
    '~'
    '!'
    '='
    '<'
    '>'
    '+='
    '-='
    '*='
    '/='
    '%='
    '^='
    '&='
    '|='
    '<<'
    '>>'
    '>>='
    '<<='
    '=='
    '!='
    '<='
    '>='
    '&&'
    '||'
    '++'
    '--'
    ','
    '->*'
    '->'
    '()'
    '[]'

operator_function_id
    'operator' operator

original_namespace_definition
    'namespace' identifier '{' namespace_body '}'

original_namespace_name
    identifier

paramerter_declaration_clause
    [ parameter_declaration_list ] [ '...' ]
    parameter_declaration_list ',' '...'

parameter_declaration
    decl_specifier_seq declarator
    decl_specifier_seq declarator '=' assignment_expression
    decl_specifier_seq [ abstract_declarator ]
    decl_specifier_seq [ abstract_declarator ] '=' assignment_expression

parameter_declaration_list
    parameter_declaration
    parameter_declaration_list ',' parameter_declaration

pm_expression
    cast_expression
    pm_expression '.*' cast_expression
    pm_expression '->*' cast_expression

postfix_expression
    primary_expression
    postfix_expression '[' expression ']'
    postfix_expression '(' [ expression_list ] ')'
    simple_type_specifier '(' [ expression_list ] ')'
    'typename' [ '::' ] nested_name_specifier identifier '(' [ expression_list ] ')'
    'typename' [ '::' ] nested_name_specifier [ 'template' ] template_id '(' [ expression_list ] ')'
    postfix_expression '.' [ 'template' ] id_expression
    postfix_expression '->' [ 'template' ] id_expression
    postfix_expression '.' pseudo_destructor_name
    postfix_expression '->' pseudo_destructor_name
    postfix_expression '++'
    postfix_expression '--'
    'dynamic_cast' '<' type_id '>' '(' expression ')'
    'static_cast' '<' type_id '>' '(' expression ')'
    'reinterpret_cast' '<' type_id '>' '(' expression ')'
    'const_cast' '<' type_id '>' '(' expression ')'
    'typeid' '(' expression ')'
    'typeid' '(' type_id ')'

primary_expression
    literal
    'this'
    '(' expression ')'
    id_expression

pseudo_destructor_name
    [ '::' ] [ nested_name_specifier ] type_name '::' '~' type_name
    [ '::' ] nested_name_specifier 'template' template_id '::' '~' type_name
    [ '::' ] [ nested_name_specifier ] '~' type_name

ptr_operator
    '*' [ cv_qualifier_seq ]
    '&'
    [ '::' ] nested_name_specifier '*' [ cv_qualifier_seq ]

pure_specifier
    '=' '0'

qualified_id
    [ '::' ] nested_name_specifier [ 'template' ] unqualified_id
    '::' identifier
    '::' operator_function_id
    '::' template_id

qualified_namespace_specifier
    [ '::' ] [ nested_name_specifier ] namespace_name

relational_expression
    shift_expression
    relational_expression '<' shift_expression
    relational_expression '>' shift_expression
    relational_expression '<=' shift_expression
    relational_expression '>=' shift_expression

selection_statement
    'if' '(' condition ')' statement
    'if' '(' condition ')' statement 'else' statement
    'switch' '(' condition ')' statement

shift_expression
    additive_expression
    shift_expression '<<' additive_expression
    shift_expression '>>' additive_expression

sign
    '+'
    '-'

simple_declaration
    [ decl_specifier_seq ] [ init_declarator_list ] ';'

simple_type_specifier
    [ '::' ] [ nested_name_specifier ] type_name
    [ '::' ] nested_name_specifier 'template' template_id
    'char'
    'wchar_t'
    'bool'
    'short'
    'int'
    'long'
    'signed'
    'unsigned'
    'float'
    'double'
    'void'

statement
    labeled_statement
    expression_statement
    compound_statement
    selection_statement
    iteration_statement
    jump_statement
    declaration_statement
    try_block

statement_seq
    statement
    statement_seq statement

storage_class_specifier
    'auto'
    'register'
    'static'
    'extern'
    'mutable'

syntax
    translation_unit

template_argument
    assignment_expression
    type_id
    id_expression

template_argument_list
    template_argument
    template_argument_list ',' template_argument

template_declaration
    [ 'export' ] 'template' '<' template_parameter_list '>' declaration

template_id
    template_name '<' [ template_argument_list ] '>'

template_name
    identifier

template_parameter
    type_parameter
    parameter_declaration

template_parameter_list
    template_parameter
    template_parameter_list ',' template_parameter

throw_expression
    'throw' [ assignment_expression ]

translation_unit
    [ declaration_seq ]

try_block
    'try' compound_statement handler_seq

type_id
    type_specifier_seq [ abstract_declarator ]

type_id_list
    type_id
    type_id_list ',' type_id

type_name
    class_name
    enum_name
    typedef_name

type_parameter
    'class' [ identifier ]
    'class' [ identifier ] '=' type_id
    'typename' [ identifier ]
    'typename' [ identifier ] '=' type_id
    'template' '<' template_parameter_list '>' 'class' [ identifier ]
    'template' '<' template_parameter_list '>' 'class' [ identifier ] '=' id_expression

type_specifier
    simple_type_specifier
    class_specifier
    enum_specifier
    elaborated_type_specifier
    cv_qualifier

type_specifier_seq
    type_specifier [ type_specifier_seq ]

typedef_name
    identifier

unary_expression
    postfix_expression
    '++' cast_expression
    '--' cast_expression
    unary_operator cast_expression
    'sizeof' unary_expression
    'sizeof' '(' type_id ')'
    new_expression
    delete_expression

unary_operator
    '*'
    '&'
    '+'
    '-'
    '!'
    '~'

unnamed_namespace_definition
    'namespace' '{' namespace_body '}'

unqualified_id
    identifier
    operator_function_id
    conversion_function_id
    '~' class_name
    template_id

using_declaration
    'using' [ 'typename' ] [ '::' ] nested_name_specifier unqualified_id ';'
    'using' '::' unqualified_id ';'

using_directive
    'using' 'namespace' [ '::' ] [ nested_name_specifier ] namespace_name ';'